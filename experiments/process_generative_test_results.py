# 
# Process the results generated by running
#   python3 generative_tests.py
# 
# And store the output CSV in "../results/generative_results_summary.csv".
# 
# Also provide some summary information about the data being processed
# and an overview of all the error codes seen across all generative experiments.
# 

import os
import pickle
import re
import tqdm
from generative_tests import output_dir

results_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
                            "results", "generative_results_summary.csv")

if __name__ == "__main__":
    print()
    print("Storing results in:\n", repr(results_file), flush=True)
    print()

    # Clear the file so that it is empty.
    with open(results_file, "w") as f:
        print('version,geometry,d,n,skew,scale,trial,error_71,other_error', file=f)

    # Process the data (and print a summary of data for the first file encountered).
    errors_at = {}
    shown_types = False
    for path in tqdm.tqdm(os.listdir(output_dir)):
        full_path = os.path.join(output_dir, path)
        # Load results from this experiment.
        with open(full_path, "rb") as f:
            experiment = pickle.load(f)
            # Single-time summary of the contents of experiment results.
            if (not shown_types):
                print()
                print("Experiment results contain:")
                for (k,v) in experiment.items():
                    print(f"  {k:20s} {type(v).__name__:6s} {v.shape if hasattr(v, 'shape') else ''}")
                print()
                shown_types = True
            # Store all experiment data in the local scope (with appropriate names).
            locals().update(experiment)
        # print(path, end="\r")
        # print()
        # 
        # Process the experiment results.
        # Example:
        #   path = "v1-exponential_skew_ball-6_d=2_n=16384_skew=1048576_scale=1.pkl"
        #    -> version = "v1"
        #    -> geometry = "exponential_skew_ball"
        #    -> str_config = "6_d=2_n=16384_skew=1048576_scale=1.pkl"
        #    -> trial = ["6", "d=2", "n=16384", "skew=1048576", "scale=1.pkl"][0]
        #    -> config = ["6_d=2_n=16384_skew=1048576_scale=1", "pkl"][0]
        #              = "6_d=2_n=16384_skew=1048576_scale=1".split("_")
        #              = ["6", "d=2", "n=16384", "skew=1048576", "scale=1"][1:]
        #              = dict([("d","2"), ("n","16384"), ("skew","1048576"), ("scale","1")])
        #              = {"d": "2", "n": "16384", "skew": "1048576", "scale": "1"}
        #    -> d = int("2")
        #    -> n = int("16384")
        #    -> skew = float("1048576")
        #    -> scale = float("1")
        # 
        version, geometry, str_config = re.split(r"-", path, 2)
        trial = int(str_config.split("_")[0])
        config = dict((kv.split("=") for kv in str_config.split('.')[0].split("_")[1:]))
        d = int(config["d"])
        n = int(config["n"])
        skew = float(config["skew"])
        scale = float(config["scale"])
        # Get extrapolation related errors and other errors.
        error_71 = errors.get(71, 0)
        if hasattr(error_71, "__len__"):
            error_71 = len(error_71)
        # Get any "other error" that occurred.
        other_error = sorted(set(errors) - {1,71})
        if len(other_error) == 1:
            other_error = other_error[0]
        else:
            other_error = 0
        # Write to file.
        with open(results_file, "a") as f:
            print(",".join(map(repr, (int(version[1]), geometry, d, n, skew, scale, trial, error_71, other_error))), file=f)
        # Store some summary data too.
        for (error_code, indices) in sorted(errors.items()):
            errors_at[(version, error_code)] = errors_at.get((version, error_code), []) + [dict(
                geometry=geometry,
                trial=trial,
                d=d,
                n=n,
                skew=skew,
                scale=scale,
            )]
    print()
    print("Errors:")
    for ((version, error_code), configs) in errors_at.items():
        print("", version, error_code, len(configs))
